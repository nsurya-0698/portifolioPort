'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var core = require('@react-pdf-viewer/core');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () { return e[k]; }
                });
            }
        });
    }
    n["default"] = e;
    return Object.freeze(n);
}

var React__namespace = /*#__PURE__*/_interopNamespace(React);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

var CoverInner = function (_a) {
    var getPageIndex = _a.getPageIndex, renderSpinner = _a.renderSpinner, doc = _a.doc;
    var _b = React__namespace.useState(''), src = _b[0], setSrc = _b[1];
    var containerRef = React__namespace.useRef();
    React__namespace.useEffect(function () {
        var containerEle = containerRef.current;
        if (!containerEle) {
            return;
        }
        var numPages = doc.numPages;
        var targetPage = getPageIndex ? getPageIndex({ numPages: numPages }) : 0;
        var normalizePage = Math.max(0, Math.min(targetPage, numPages - 1));
        core.getPage(doc, normalizePage).then(function (page) {
            var viewport = page.getViewport({ scale: 1 });
            var w = viewport.width;
            var h = viewport.height;
            var canvas = document.createElement('canvas');
            var canvasContext = canvas.getContext('2d', {
                alpha: false,
            });
            var containerWidth = containerEle.clientWidth;
            var containerHeight = containerEle.clientHeight;
            var scaled = Math.min(containerWidth / w, containerHeight / h);
            var canvasWidth = scaled * w;
            var canvasHeight = scaled * h;
            canvas.height = canvasHeight;
            canvas.width = canvasWidth;
            canvas.style.opacity = '0';
            var renderViewport = page.getViewport({
                rotation: 0,
                scale: scaled,
            });
            var renderTask = page.render({ canvasContext: canvasContext, viewport: renderViewport });
            renderTask.promise.then(function () { return setSrc(canvas.toDataURL()); }, function () {
            });
        });
    }, []);
    return src ? (React__namespace.createElement("img", { className: "rpv-thumbnail__cover-image", "data-testid": "thumbnail__cover-image", src: src })) : (React__namespace.createElement("div", { className: "rpv-thumbnail__cover-loader", ref: containerRef }, renderSpinner ? renderSpinner() : React__namespace.createElement(core.Spinner, null)));
};

var Cover = function (_a) {
    var getPageIndex = _a.getPageIndex, renderSpinner = _a.renderSpinner, store = _a.store;
    var _b = React__namespace.useState(), currentDoc = _b[0], setCurrentDoc = _b[1];
    var handleDocumentChanged = function (doc) {
        setCurrentDoc(doc);
    };
    React__namespace.useEffect(function () {
        store.subscribe('doc', handleDocumentChanged);
        return function () {
            store.unsubscribe('doc', handleDocumentChanged);
        };
    }, []);
    return (React__namespace.createElement("div", { className: "rpv-thumbnail__cover" }, currentDoc ? (React__namespace.createElement(CoverInner, { doc: currentDoc, getPageIndex: getPageIndex, renderSpinner: renderSpinner })) : (React__namespace.createElement("div", { className: "rpv-thumbnail__cover-loader" }, renderSpinner ? renderSpinner() : React__namespace.createElement(core.Spinner, null)))));
};

var defaultSpinner = function () { return React__namespace.createElement(core.Spinner, null); };
var SpinnerContext = React__namespace.createContext({
    renderSpinner: defaultSpinner,
});

var scrollToBeVisible = function (ele, container) {
    var top = ele.getBoundingClientRect().top - container.getBoundingClientRect().top;
    var eleHeight = ele.clientHeight;
    var containerHeight = container.clientHeight;
    if (top < 0) {
        container.scrollTop += top;
        return;
    }
    if (top + eleHeight <= containerHeight) {
        return;
    }
    container.scrollTop += top + eleHeight - containerHeight;
};

var ThumbnailItem = function (_a) {
    var page = _a.page, pageHeight = _a.pageHeight, pageIndex = _a.pageIndex, pageWidth = _a.pageWidth, rotation = _a.rotation, thumbnailHeight = _a.thumbnailHeight, thumbnailWidth = _a.thumbnailWidth;
    var l10n = React__namespace.useContext(core.LocalizationContext).l10n;
    var renderTask = React__namespace.useRef();
    var _b = React__namespace.useState(''), src = _b[0], setSrc = _b[1];
    var thumbnailLabel = (l10n && l10n.thumbnail ? l10n.thumbnail.thumbnailLabel : 'Thumbnail of page {{pageIndex}}');
    React__namespace.useEffect(function () {
        var task = renderTask.current;
        if (task) {
            task.cancel();
        }
        var canvas = document.createElement('canvas');
        var canvasContext = canvas.getContext('2d', {
            alpha: false,
        });
        var w = thumbnailWidth;
        var h = w / (pageWidth / pageHeight);
        var scale = w / pageWidth;
        canvas.height = h;
        canvas.width = w;
        canvas.style.height = "".concat(h, "px");
        canvas.style.width = "".concat(w, "px");
        var viewport = page.getViewport({ rotation: rotation, scale: scale });
        renderTask.current = page.render({ canvasContext: canvasContext, viewport: viewport });
        renderTask.current.promise.then(function () { return setSrc(canvas.toDataURL()); }, function () {
        });
    }, [rotation]);
    return !src ? (React__namespace.useContext(SpinnerContext).renderSpinner()) : (React__namespace.createElement("img", { "aria-label": thumbnailLabel.replace('{{pageIndex}}', "".concat(pageIndex + 1)), src: src, height: "".concat(thumbnailHeight, "px"), width: "".concat(thumbnailWidth, "px") }));
};

var THUMBNAIL_WIDTH = 100;
var ThumbnailContainer = function (_a) {
    var doc = _a.doc, isActive = _a.isActive, pageHeight = _a.pageHeight, pageIndex = _a.pageIndex, pageWidth = _a.pageWidth, rotation = _a.rotation, onActive = _a.onActive;
    var _b = React__namespace.useState({
        height: pageHeight,
        isCalculated: false,
        page: null,
        viewportRotation: 0,
        width: pageWidth,
    }), pageSize = _b[0], setPageSize = _b[1];
    var visibilityRef = React__namespace.useRef({
        isVisible: false,
        ratio: 0,
    });
    var isCalculated = pageSize.isCalculated, page = pageSize.page, height = pageSize.height, width = pageSize.width;
    var scale = width / height;
    var isVertical = Math.abs(rotation) % 180 === 0;
    var w = isVertical ? THUMBNAIL_WIDTH : THUMBNAIL_WIDTH / scale;
    var h = isVertical ? THUMBNAIL_WIDTH / scale : THUMBNAIL_WIDTH;
    React__namespace.useLayoutEffect(function () {
        if (!isActive) {
            return;
        }
        var visibility = visibilityRef.current;
        if (!visibility.isVisible || visibility.ratio < 1) {
            onActive(pageIndex);
        }
    }, [isActive]);
    var onVisibilityChanged = function (params) {
        visibilityRef.current = params;
        if (params.isVisible && !isCalculated) {
            core.getPage(doc, pageIndex).then(function (pdfPage) {
                var viewport = pdfPage.getViewport({ scale: 1 });
                setPageSize({
                    height: viewport.height,
                    isCalculated: true,
                    page: pdfPage,
                    viewportRotation: viewport.rotation,
                    width: viewport.width,
                });
            });
        }
    };
    var rotationNumber = (rotation + pageSize.viewportRotation) % 360;
    var containerRef = core.useIntersectionObserver({
        onVisibilityChanged: onVisibilityChanged,
    });
    return (React__namespace.createElement("div", { className: "rpv-thumbnail__container", ref: containerRef, style: {
            height: "".concat(h, "px"),
            width: "".concat(w, "px"),
        } }, !page ? (React__namespace.useContext(SpinnerContext).renderSpinner()) : (React__namespace.createElement(ThumbnailItem, { page: page, pageHeight: isVertical ? height : width, pageIndex: pageIndex, pageWidth: isVertical ? width : height, rotation: rotationNumber, thumbnailHeight: h, thumbnailWidth: w }))));
};

var ThumbnailList = function (_a) {
    var currentPage = _a.currentPage, doc = _a.doc, labels = _a.labels, pageHeight = _a.pageHeight, pageWidth = _a.pageWidth, renderCurrentPageLabel = _a.renderCurrentPageLabel, renderThumbnailItem = _a.renderThumbnailItem, rotation = _a.rotation, onJumpToPage = _a.onJumpToPage;
    var numPages = doc.numPages;
    var numLabels = labels.length;
    var containerRef = React__namespace.useRef(null);
    var thumbnailsRef = React__namespace.useRef([]);
    var _b = React__namespace.useState(currentPage), currentFocused = _b[0], setCurrentFocused = _b[1];
    var direction = React__namespace.useContext(core.ThemeContext).direction;
    var isRtl = direction === core.TextDirection.RightToLeft;
    var scrollToThumbnail = function (pageIndex) {
        var container = containerRef.current;
        if (container) {
            var thumbnailNodes = container.children;
            if (pageIndex < thumbnailNodes.length) {
                scrollToBeVisible(thumbnailNodes.item(pageIndex), container);
            }
        }
    };
    var handleKeyDown = function (e) {
        switch (e.key) {
            case 'ArrowDown':
                activateNextItem();
                break;
            case 'ArrowUp':
                activatePreviousItem();
                break;
            case 'Enter':
                jumpToFocusedPage();
                break;
        }
    };
    var activateNextItem = function () {
        var container = containerRef.current;
        if (!container) {
            return;
        }
        var items = thumbnailsRef.current;
        var nextItem = currentFocused + 1;
        if (nextItem < items.length) {
            if (currentFocused >= 0) {
                items[currentFocused].setAttribute('tabindex', '-1');
            }
            setCurrentFocused(nextItem);
        }
    };
    var activatePreviousItem = function () {
        var container = containerRef.current;
        if (!container) {
            return;
        }
        var items = thumbnailsRef.current;
        var prevItem = currentFocused - 1;
        if (prevItem >= 0) {
            if (currentFocused >= 0) {
                items[currentFocused].setAttribute('tabindex', '-1');
            }
            setCurrentFocused(prevItem);
        }
    };
    var jumpToFocusedPage = function () {
        if (currentFocused >= 0 && currentFocused < numPages) {
            onJumpToPage(currentFocused);
        }
    };
    core.useIsomorphicLayoutEffect(function () {
        var container = containerRef.current;
        if (!container) {
            return;
        }
        thumbnailsRef.current = Array.from(container.querySelectorAll('.rpv-thumbnail__item'));
    }, []);
    React__namespace.useEffect(function () {
        var thumbnails = thumbnailsRef.current;
        if (thumbnails.length === 0 || currentFocused < 0 || currentFocused > thumbnails.length) {
            return;
        }
        var thumbnailEle = thumbnails[currentFocused];
        thumbnailEle.setAttribute('tabindex', '0');
        thumbnailEle.focus();
    }, [currentFocused]);
    return (React__namespace.createElement("div", { ref: containerRef, "data-testid": "thumbnail__list", className: core.classNames({
            'rpv-thumbnail__list': true,
            'rpv-thumbnail__list--rtl': isRtl,
        }), onKeyDown: handleKeyDown }, Array(numPages)
        .fill(0)
        .map(function (_, pageIndex) {
        var key = "".concat(doc.loadingTask.docId, "___").concat(pageIndex);
        var pageLabel = numLabels === numPages ? labels[pageIndex] : "".concat(pageIndex + 1);
        var label = renderCurrentPageLabel
            ? renderCurrentPageLabel({ currentPage: currentPage, pageIndex: pageIndex, numPages: numPages, pageLabel: pageLabel })
            : pageLabel;
        var thumbnail = (React__namespace.createElement(ThumbnailContainer, { doc: doc, isActive: currentPage === pageIndex, pageHeight: pageHeight, pageIndex: pageIndex, pageWidth: pageWidth, rotation: rotation, onActive: scrollToThumbnail }));
        return renderThumbnailItem ? (renderThumbnailItem({
            currentPage: currentPage,
            key: key,
            numPages: numPages,
            pageIndex: pageIndex,
            renderPageLabel: React__namespace.createElement(React__namespace.Fragment, null, label),
            renderPageThumbnail: thumbnail,
            onJumpToPage: function () { return onJumpToPage(pageIndex); },
        })) : (React__namespace.createElement("div", { key: key },
            React__namespace.createElement("div", { className: core.classNames({
                    'rpv-thumbnail__item': true,
                    'rpv-thumbnail__item--selected': currentPage === pageIndex,
                }), role: "button", tabIndex: currentPage === pageIndex ? 0 : -1, onClick: function () { return onJumpToPage(pageIndex); } }, thumbnail),
            React__namespace.createElement("div", { className: "rpv-thumbnail__index" }, label)));
    })));
};

var usePageLabels = function (store) {
    var _a = React__namespace.useState([]), labels = _a[0], setLabels = _a[1];
    var handleDocumentChanged = function (doc) {
        doc.getPageLabels().then(function (result) {
            setLabels(result || []);
        });
    };
    React__namespace.useEffect(function () {
        store.subscribe('doc', handleDocumentChanged);
        return function () {
            setLabels([]);
            store.unsubscribe('doc', handleDocumentChanged);
        };
    }, []);
    return labels;
};

var ThumbnailListWithStore = function (_a) {
    var renderCurrentPageLabel = _a.renderCurrentPageLabel, renderThumbnailItem = _a.renderThumbnailItem, store = _a.store;
    var labels = usePageLabels(store);
    var _b = React__namespace.useState(store.get('doc')), currentDoc = _b[0], setCurrentDoc = _b[1];
    var _c = React__namespace.useState(store.get('currentPage') || 0), currentPage = _c[0], setCurrentPage = _c[1];
    var _d = React__namespace.useState(store.get('pageHeight') || 0), pageHeight = _d[0], setPageHeight = _d[1];
    var _e = React__namespace.useState(store.get('pageWidth') || 0), pageWidth = _e[0], setPageWidth = _e[1];
    var _f = React__namespace.useState(store.get('rotation') || 0), rotation = _f[0], setRotation = _f[1];
    var handleCurrentPageChanged = function (currentPageIndex) {
        setCurrentPage(currentPageIndex);
    };
    var handleDocumentChanged = function (doc) {
        setCurrentDoc(doc);
    };
    var handlePageHeightChanged = function (height) {
        setPageHeight(height);
    };
    var handlePageWidthChanged = function (width) {
        setPageWidth(width);
    };
    var handleRotationChanged = function (currentRotation) {
        setRotation(currentRotation);
    };
    var jump = function (pageIndex) {
        var jumpToPage = store.get('jumpToPage');
        if (jumpToPage) {
            jumpToPage(pageIndex);
        }
    };
    React__namespace.useEffect(function () {
        store.subscribe('doc', handleDocumentChanged);
        store.subscribe('pageHeight', handlePageHeightChanged);
        store.subscribe('pageWidth', handlePageWidthChanged);
        store.subscribe('rotation', handleRotationChanged);
        return function () {
            store.unsubscribe('doc', handleDocumentChanged);
            store.unsubscribe('pageHeight', handlePageHeightChanged);
            store.unsubscribe('pageWidth', handlePageWidthChanged);
            store.unsubscribe('rotation', handleRotationChanged);
        };
    }, []);
    core.useIsomorphicLayoutEffect(function () {
        store.subscribe('currentPage', handleCurrentPageChanged);
        return function () {
            store.unsubscribe('currentPage', handleCurrentPageChanged);
        };
    }, []);
    return currentDoc ? (React__namespace.createElement(ThumbnailList, { currentPage: currentPage, doc: currentDoc, labels: labels, pageHeight: pageHeight, pageWidth: pageWidth, renderCurrentPageLabel: renderCurrentPageLabel, renderThumbnailItem: renderThumbnailItem, rotation: rotation, onJumpToPage: jump })) : (React__namespace.createElement("div", { "data-testid": "thumbnail-list__loader", className: "rpv-thumbnail__loader" }, React__namespace.useContext(SpinnerContext).renderSpinner()));
};

var thumbnailPlugin = function (pluginProps) {
    var store = React__namespace.useMemo(function () { return core.createStore({}); }, []);
    var CoverDecorator = function (props) { return (React__namespace.createElement(Cover, __assign({}, props, { renderSpinner: pluginProps === null || pluginProps === void 0 ? void 0 : pluginProps.renderSpinner, store: store }))); };
    var ThumbnailsDecorator = React__namespace.useCallback(function (props) { return (React__namespace.createElement(SpinnerContext.Provider, { value: { renderSpinner: (pluginProps === null || pluginProps === void 0 ? void 0 : pluginProps.renderSpinner) || defaultSpinner } },
        React__namespace.createElement(ThumbnailListWithStore, { renderCurrentPageLabel: pluginProps === null || pluginProps === void 0 ? void 0 : pluginProps.renderCurrentPageLabel, renderThumbnailItem: props === null || props === void 0 ? void 0 : props.renderThumbnailItem, store: store }))); }, []);
    return {
        install: function (pluginFunctions) {
            store.update('jumpToPage', pluginFunctions.jumpToPage);
        },
        onDocumentLoad: function (props) {
            store.update('doc', props.doc);
        },
        onViewerStateChange: function (viewerState) {
            store.update('currentPage', viewerState.pageIndex);
            store.update('pageHeight', viewerState.pageHeight);
            store.update('pageWidth', viewerState.pageWidth);
            return viewerState;
        },
        Cover: CoverDecorator,
        Thumbnails: ThumbnailsDecorator,
    };
};

exports.thumbnailPlugin = thumbnailPlugin;
